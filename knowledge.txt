1. При расследовании инцидентов в распределённых микросервисах мы всегда начинаем с проверки трассировок OpenTelemetry и логов уровня WARN, потому что они быстрее всего показывают, где цепочка вызовов оборвалась и какой сервис первым вернул некорректный код.
2. Если пользователи жалуются на медленную загрузку интерфейса, надежнее всего сверяться с дашбордом Core Web Vitals и сравнивать показатели LCP и FID по регионам, иначе можно потратить часы на локальные воспроизведения, не увидев истинного узкого места.
3. Поддержка регулярно напоминает разработчикам держать документацию по фичефлагам в Confluence актуальной, поскольку забытый включённый флаг в staging часто приводит к «невоспроизводимости» ошибки на стороне инженеров сопровождения.
4. Для предотвращения повторных обращений по одной и той же ошибке мы создаём KEDB-записи (Known Error DataBase) сразу после успешного обходного решения, обязательно прописывая ID инцидента, задействованные сервисы и команду владельца.
5. Когда в чат поступает массовый чат о недоступности API, дежурный инженер оповещает команду через PagerDuty и переводит трафик на резервный регион, иначе SLA легко падает ниже 99,9 % и срабатывают штрафные санкции.
6. В сложных случаях с нестабильными зависимостями мы просим заказчиков прислать HAR-логи и сетевые дампы из браузера, потому что они показывают, какие именно запросы были заблокированы корпоративным прокси и где обрывается TLS-рукопожатие.
7. При работе с мобильными клиентами важно сразу уточнять версию приложения и номер сборки, ведь пользователь может получить аварийный экран из-за старого SDK аналитики, а не из-за реального падения бэкенда.
8. Для снижения времени восстановления службы база знаний ServiceNow содержит пошаговые плейбуки: какие команды дергать в Kubernetes, как переключить feature gate и какие алерты нужно заглушить, чтобы не перегружать on-call.
9. После закрытия крупных инцидентов мы проводим постмортемы с мастер-таблицей RCA, где фиксируем корневую причину, обнаруженный технический долг и обязательные улучшения мониторинга, чтобы не повторять те же ошибки при следующей волне обращений.
